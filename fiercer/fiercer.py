#!/usr/bin/python

#a simple version of fierce using dnspython
#written because mandatory zone transfers are dumb, as is crashing on malformed dns responses

#example: python fiercer.py <target> <hostlist> --dns 8.8.8.8,41.57.120.57,41.57.120.33,41.57.30.199

import dns.resolver
import sys,threading,Queue,argparse,time

#threaded resolution functions

def resolve(host, nameservers=[], timeout=3):
	try:
		resolver = dns.resolver.Resolver()
		if len(nameservers) > 0:
			resolver.nameservers = nameservers
			resolver.timeout = timeout
			resolver.lifetime = timeout
			resolver.configure = False
		answers = resolver.query(host, "A")
		return [answers, host]
	except dns.resolver.NXDOMAIN:
		return 0
	except dns.resolver.Timeout:
		return 1

def resolve_queue(host, q, nameservers=[], timeout=3):
	try:
		result = resolve(host, nameservers,timeout)
		retry = 0
		while (result == 1) and (retry < 3):
			time.sleep(5)
			result = resolve(host, nameservers,timeout)
			retry += 1
		if type(result) != int:
			q.put(result)
	except Exception as err:
		print "Error: " + str(err)

def spawn_thread(host, q, nameservers=[], timeout=3):
	worker = threading.Thread(target=resolve_queue, args=(host,q,nameservers,timeout))
	worker.daemon = True
	worker.start()
	return worker

#get arguments & initialize

parser = argparse.ArgumentParser(description="A simple fierce clone to fix some of the bugginess found in the original script.")
parser.add_argument("target")
parser.add_argument("hostlist")
parser.add_argument("--timeout", help="defaults to 3", default=3, type=int)
parser.add_argument("--threads", help="defaults to 3", default=3, type=int)
parser.add_argument("--delay", help="defaults to 0.1", default=0.1, type=float)
parser.add_argument("--output", help="defaults to out.txt", default="out.txt")
parser.add_argument("--dns", help="nameservers separated by commas")
args = parser.parse_args()

target = args.target

try:
	host_fd = open(args.hostlist)
	hosts = host_fd.read().splitlines()
	host_fd.close()
except IOError:
	print "Could not open the hostlist at " + args.hostlist + " - QUITTING."
	sys.exit()

try:
	out_fd = open(args.output, "w", 0)
except IOError:
	print "Could not write to " + args.hostlist + " - QUITTING."

max_threads = args.threads
timeout = args.timeout

try:
	nameservers = args.dns.split(",")
except:
	nameservers=[]

#resolution

start_len = len(hosts)

progress = threading.Thread(target=time.sleep, args=(10,))
progress.daemon = True
progress.start()

answer_queue = Queue.Queue()
live_threads = []

while len(hosts) > 0:
	for thread in live_threads:
		if not thread.isAlive():
			live_threads.remove(thread)
	if len(live_threads) < max_threads:
		live_threads.append(spawn_thread(hosts[0] + "." + target, answer_queue, nameservers=nameservers, timeout=timeout))
		del hosts[0]
	if not answer_queue.empty():
		[answers, foundhost] = answer_queue.get()
		for x in answers:
			print foundhost + ": " + str(x)
			out_fd.write(foundhost + ": " + str(x) + "\n")
	if not progress.isAlive():
		progress = threading.Thread(target=time.sleep, args=(10,))
		progress.daemon = True
		progress.start()
		percent = (float(len(hosts)) / float(start_len)) * 100
		print str(percent) + "% remaining"
	time.sleep(args.delay)

#TODO: test in a variety of circumstances; seems pretty solid right now
